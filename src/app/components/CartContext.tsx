//cartcontext
"use client";

import React, { createContext, useContext, useState, useEffect, ReactNode } from "react";

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
interface OptionSelection {
  group_id: number;
  selected_items: number[];
}

interface CartItem {
  cart_id: string;
  item_id: string;
  menu_name: string;
  price: number;
  quantity: number;
  shop_id: string;
  menu_image: string;
  item_name?: string;
  note?: string;
  options?: OptionSelection[]; // ‚úÖ ‡πÉ‡∏ä‡πâ options ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
}


interface CartContextType {
  cartItems: CartItem[];
  setCartItems: React.Dispatch<React.SetStateAction<CartItem[]>>;
  addToCart: (item: CartItem) => void;
  removeFromCart: (cart_id: string) => void;
  updateQuantity: (cart_id: string, quantity: number) => void;
  getTotalQuantity: () => number;
}

export const CartContext = createContext<CartContextType | undefined>(undefined);

export const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error("useCart ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô CartProvider");
  }
  return context;
};

export const CartProvider = ({ children }: { children: ReactNode }) => {
  const [cartItems, setCartItems] = useState<CartItem[]>([]);

  useEffect(() => {
    try {
      const savedCart = localStorage.getItem("cart");
      if (savedCart) {
        const parsedCart = JSON.parse(savedCart);
        console.log("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", parsedCart);
        setCartItems(parsedCart);
      }
    } catch (error) {
      console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
    }
  }, []);

  useEffect(() => {
    localStorage.setItem("cart", JSON.stringify(cartItems)); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï localStorage ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà cartItems ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  }, [cartItems]);

  const generateCartId = (item: CartItem) => {
    const optionsString = item.options
      ? JSON.stringify(
          item.options.map(o => ({
            group_id: o.group_id,
            selected_items: o.selected_items.sort(),
          }))
        )
      : "";
    return `${item.item_id}-${optionsString}-${item.note || ""}`;
  };

  const addToCart = (item: CartItem) => {
    const cart_id = generateCartId(item);

    setCartItems(prevItems => {
      if (prevItems.length > 0 && prevItems[0].shop_id !== item.shop_id) {
        console.log("üõí ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å", prevItems[0].shop_id, "‡πÄ‡∏õ‡πá‡∏ô", item.shop_id, "‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤!");
        const newCart = [{ ...item, cart_id }];
        localStorage.setItem("cart", JSON.stringify(newCart)); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï localStorage ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
        return newCart;
      }

      const existingItem = prevItems.find(cartItem => cartItem.cart_id === cart_id);

      if (existingItem) {
        return prevItems.map(cartItem =>
          cartItem.cart_id === cart_id
            ? { ...cartItem, quantity: cartItem.quantity + item.quantity }
            : cartItem
        );
      }

      return [...prevItems, { ...item, cart_id }];
    });
  };

  const removeFromCart = (cart_id: string) => {
    setCartItems(prevItems => {
      const updatedCart = prevItems.filter(item => item.cart_id !== cart_id);
      localStorage.setItem("cart", JSON.stringify(updatedCart)); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï localStorage ‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      return updatedCart;
    });
  };

  const updateQuantity = (cart_id: string, quantity: number) => {
    setCartItems(prevItems =>
      prevItems.map(item =>
        item.cart_id === cart_id ? { ...item, quantity } : item
      )
    );
  };

  const getTotalQuantity = () => {
    return cartItems.reduce((total, item) => total + item.quantity, 0);
  };

  return (
    <CartContext.Provider value={{ cartItems, setCartItems, addToCart, removeFromCart, updateQuantity, getTotalQuantity }}>
      {children}
    </CartContext.Provider>
  );
};
