"use client"; // ‚úÖ ‡πÉ‡∏ä‡πâ client component

import { createContext, useContext, useState } from "react";

// üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Context
interface CategoryContextType {
  selectedCategory: number | null;
  setSelectedCategory: (category: number | null) => void; // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö state ‡∏à‡∏£‡∏¥‡∏á
  isCategorySelected: boolean;
  setIsCategorySelected: (value: boolean) => void;
}

// üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á Context (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
const CategoryContext = createContext<CategoryContextType>({
  selectedCategory: null, 
  setSelectedCategory: () => {}, // ‚úÖ ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å `setCategory` ‡πÄ‡∏õ‡πá‡∏ô `setSelectedCategory`
  isCategorySelected: false,
  setIsCategorySelected: () => {},
});

// üîπ Provider ‡∏´‡πà‡∏≠ Component ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Context
export function CategoryProvider({ children }: { children: React.ReactNode }) {
  const [selectedCategory, setSelectedCategory] = useState<number | null>(null);
  const [isCategorySelected, setIsCategorySelected] = useState(false);

  return (
    <CategoryContext.Provider
      value={{
        selectedCategory,
        setSelectedCategory, // ‚úÖ ‡πÉ‡∏ä‡πâ `setSelectedCategory` ‡πÅ‡∏ó‡∏ô `setCategory`
        isCategorySelected,
        setIsCategorySelected,
      }}
    >
      {children}
    </CategoryContext.Provider>
  );
}

// üîπ Hook ‡πÉ‡∏ä‡πâ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
export function useCategory() {
  return useContext(CategoryContext);
}
