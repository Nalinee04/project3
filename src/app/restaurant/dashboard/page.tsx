"use client";

import { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/navigation";
import { Card, CardContent } from "@/components/ui/card";
import Switch from "@/components/ui/switch";
import { formatCurrency } from "@/app/utils/format";
import { useSession } from "next-auth/react";
import Link from "next/link";
import BottomNavRestaurant from "@/app/components/BottomNavRestaurant";


interface Order {
  order_id: number;
  order_number: string;
  customer_name: string;
  customer_phone: string; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
  created_at: string; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á
  status: string;
}

const Dashboard = () => {
  const router = useRouter();
  const { data: session, status } = useSession();
  const [isOpen, setIsOpen] = useState(false);
  const [dailySales, setDailySales] = useState<number>(0);
  const [monthlySales, setMonthlySales] = useState<number>(0);
  const [orders, setOrders] = useState<Order[]>([]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
  const fetchOrders = useCallback(async () => {
    if (!session?.accessToken) return;
    try {
      const res = await fetch("/api/orders?status=pending", {
        headers: {
          Authorization: `Bearer ${session.accessToken}`,
        },
      });

      if (!res.ok) throw new Error(`Error ${res.status}: ${await res.text()}`);

      const data = await res.json();
      console.log("‚úÖ Orders Data:", data); // Debug Log
      setOrders(Array.isArray(data) ? data : []);
    } catch (error) {
      console.error("‚ùå Error fetching orders:", error);
    }
  }, [session?.accessToken]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
  const fetchSalesData = useCallback(async () => {
    if (!session?.accessToken) return;
    try {
      const res = await fetch("/api/sale", {
        headers: {
          Authorization: `Bearer ${session.accessToken}`,
        },
      });

      if (!res.ok) throw new Error(`Error ${res.status}: ${await res.text()}`);

      const data = await res.json();
      console.log("‚úÖ API Response:", data); // Debug ‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà API ‡∏™‡πà‡∏á‡∏°‡∏≤

      setDailySales(Number(data.total_sales) || 0); // ‚úÖ ‡πÉ‡∏ä‡πâ total_sales ‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
      setMonthlySales(Number(data.monthly_sales) || 0); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API ‡∏°‡∏µ total_monthly_sales ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    } catch (error) {
      console.error("‚ùå Error fetching sales data:", error);
    }
  }, [session?.accessToken]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô (‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î)
  const updateShopStatus = async (status: string) => {
    if (!session?.accessToken) return;
    try {
      const res = await fetch("/api/statusshop", {
        method: "PUT",
        headers: {
          Authorization: `Bearer ${session.accessToken}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ status }),
      });

      if (!res.ok) throw new Error(`Error ${res.status}: ${await res.text()}`);
      const data = await res.json();
      console.log("‚úÖ Shop Status Updated:", data);
    } catch (error) {
      console.error("‚ùå Error updating shop status:", error);
    }
  };

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤ session ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à, ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ session ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  useEffect(() => {
    if (status === "loading") return; // ‡∏£‡∏≠ session ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
    if (!session || session.user.role !== "shop") {
      router.push("/login"); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ session ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà shop role ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
      return;
    }

    fetchOrders();
    fetchSalesData();
  }, [session, status]); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á session ‡πÅ‡∏•‡∏∞ status ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠ handle ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á switch
  const handleSwitchChange = () => {
    setIsOpen((prevState) => {
      const newStatus = !prevState ? "open" : "closed";
      updateShopStatus(newStatus); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      return !prevState; // Toggle ‡∏Ñ‡πà‡∏≤ isOpen
    });
  };

  return (
    <div className="min-h-screen flex flex-col p-8 bg-gray-50">
      {/* Header */}
      <div className="flex items-center justify-between bg-yellow-500 text-white p-4 rounded-lg shadow-md mb-6">
      <header className="w-full bg-yellow-500 text-white py-4 px-6 flex justify-between items-center shadow-md fixed top-0 left-0 right-0 z-10">
        <h1 className="text-2xl font-semibold">üìä Dashboard</h1>
        <Switch checked={isOpen} onCheckedChange={() => setIsOpen(!isOpen)}>
          <span className="text-lg">{isOpen ? "‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô" : "‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô"}</span>
        </Switch>
      </header>
      </div>

      {/* Sales Summary */}
      <Card className="shadow-xl bg-white rounded-lg border border-gray-200 p-6 mb-6">
        <CardContent>
          <h2 className="text-xl font-semibold text-gray-800 mb-4">
            üí∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-green-100 p-4 rounded-lg shadow-md text-center">
              <p className="text-lg text-gray-600">‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</p>
              <p className="text-3xl font-bold text-green-600">
                {formatCurrency(dailySales)}
              </p>
            </div>
            <div className="bg-blue-100 p-4 rounded-lg shadow-md text-center">
              <p className="text-lg text-gray-600">‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</p>
              <p className="text-3xl font-bold text-blue-600">
                {formatCurrency(monthlySales)}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Order List */}
      <div className="mt-6 flex-1">
        <h2 className="text-2xl font-semibold text-gray-800 mb-4">
          üìú ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
        </h2>
        {orders.length === 0 ? (
          <p className="text-xl text-gray-600">
            ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
          </p>
        ) : (
          <ul className="space-y-4">
            {orders.map((order) => (
              <Link
                href={`/restaurant/details?order_id=${order.order_id}`}
                key={order.order_id}
              >
                <li className="bg-white shadow-lg rounded-lg p-4 border border-gray-200 hover:bg-gray-100 transition duration-300 cursor-pointer">
                  <div className="flex justify-between">
                    <h3 className="text-xl font-semibold text-gray-800">
                      {order.order_number} (#{order.order_id})
                    </h3>
                    <span
                      className={`text-sm font-semibold ${
                        order.status === "pending"
                          ? "text-yellow-500"
                          : "text-green-500"
                      }`}
                    >
                      {order.status}
                    </span>
                  </div>
                  <p className="mt-2 text-gray-600">üë§ {order.customer_name}</p>
                  <p className="text-gray-600">
                    üìÖ {new Date(order.created_at).toLocaleString()}
                  </p>
                  <p className="text-gray-600">üìû {order.customer_phone}</p>
                </li>
              </Link>
            ))}
          </ul>
        )}
      </div>
      <BottomNavRestaurant /> {/* ‚úÖ ‡πÉ‡∏™‡πà‡πÉ‡∏ô return */}
    </div>
    
  );
};

export default Dashboard;
