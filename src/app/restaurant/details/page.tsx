"use client";

import { useSearchParams, useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { useSession } from "next-auth/react";
import { Card, CardContent } from "@/components/ui/card";
import { ArrowLeft } from "lucide-react";
import Swal from "sweetalert2";

interface OrderItem {
  menu_name: string;
  quantity: number;
  price: number;
  menu_image: string;
}

const OrderDetailsPage = () => {
  const searchParams = useSearchParams();
  const order_id = searchParams.get("order_id");
  const { data: session } = useSession();
  const router = useRouter();

  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);
  const [totalAmount, setTotalAmount] = useState<number>(0);
  const [loading, setLoading] = useState(true);
  const [isUpdating, setIsUpdating] = useState(false);
  const [orderStatus, setOrderStatus] = useState("‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô");

  useEffect(() => {
    if (!order_id || !session?.accessToken) return;

    const fetchOrderDetail = async () => {
      try {
        const res = await fetch(`/api/order_items?order_id=${order_id}`, {
          headers: {
            Authorization: `Bearer ${session.accessToken}`,
          },
        });

        const data = await res.json();
        console.log("üì° API Order Data:", data);

        setOrderStatus(data.order_status);
        setOrderItems(data.items);

        if (data.total_amount !== undefined) {
          setTotalAmount(data.total_amount);
        } else {
          const calculatedTotal = data.items.reduce(
            (sum: number, item: OrderItem) => sum + item.quantity * item.price,
            0
          );
          setTotalAmount(calculatedTotal);
        }
      } catch (error) {
        console.error("‚ùå Error fetching order details:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchOrderDetail();
  }, [order_id, session?.accessToken]);

  const handleUpdateStatus = async (newStatus: string) => {
    if (!session?.accessToken || !order_id) return;

    const confirmText =
      newStatus === "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
        ? "‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"
        : `‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô \"${newStatus}\"?`;

    const result = await Swal.fire({
      title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
      text: confirmText,
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#28a745",
      cancelButtonColor: "#d33",
      confirmButtonText: "‡πÉ‡∏ä‡πà, ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£!",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });

    if (!result.isConfirmed) return;

    setIsUpdating(true);

    try {
      const res = await fetch("/api/update-status", {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${session.accessToken}`,
        },
        body: JSON.stringify({ order_id, status: newStatus }),
      });

      if (!res.ok) throw new Error(`Error: ${res.status}`);

      setOrderStatus(newStatus);
      Swal.fire("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
    } catch (error) {
      console.error("‚ùå Error updating order status:", error);
      Swal.fire("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ", "error");
    } finally {
      setIsUpdating(false);
    }
  };

  if (loading) return <p className="text-center text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>;

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      {/* üî• Header ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠ */}
      <div className="bg-yellow-500 text-white py-4 w-full flex items-center relative">
        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö (‡∏≠‡∏¢‡∏π‡πà‡∏ã‡πâ‡∏≤‡∏¢) */}
        <button
          onClick={() => router.back()}
          className="absolute left-4 flex items-center space-x-2 text-white hover:opacity-80"
        >
          <ArrowLeft className="w-6 h-6" />
          <span className="text-lg font-medium"></span>
        </button>
        {/* ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á Header */}
        <span className="text-xl font-semibold mx-auto">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</span>
      </div>

      {/* üì¶ ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ */}
      <div className="p-4">
        <Card className="shadow-md bg-white rounded-lg border border-gray-200 p-4">
          <CardContent>
            <h1 className="text-xl font-semibold text-gray-800">üì¶ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{order_id}</h1>
            <h2 className="mt-4 text-lg font-semibold text-gray-700">üõí ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
            {orderItems.length === 0 ? (
              <p className="text-gray-600">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</p>
            ) : (
              <ul className="space-y-3 mt-3">
                {orderItems.map((item, index) => (
                  <li key={index} className="flex justify-between items-center bg-gray-100 p-3 shadow-sm rounded-md">
                    <div className="flex items-center space-x-3">
                      <img
                        src={item.menu_image}
                        alt={item.menu_name}
                        className="w-14 h-14 object-cover rounded-md border"
                      />
                      <div>
                        <p className="text-md font-medium text-gray-800">{item.menu_name}</p>
                        <p className="text-gray-600 text-sm">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {item.quantity}</p>
                      </div>
                    </div>
                    <span className="text-md font-semibold text-gray-900">
                      {item.quantity} x {item.price} ‡∏ø
                    </span>
                  </li>
                ))}
              </ul>
            )}

            {/* üí∞ ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° */}
            <h2 className="mt-4 text-lg font-semibold text-gray-700">üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</h2>
            <p className="text-2xl font-bold text-green-600 mt-1">{totalAmount.toFixed(2)} ‡∏ø</p>

            {/* üîò ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
            <div className="flex flex-col space-y-2 mt-4">
              {orderStatus === "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" && (
                <button onClick={() => handleUpdateStatus("‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£")} className="py-2 rounded-lg bg-blue-500 text-white font-semibold hover:bg-blue-600">
                  üçΩ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                </button>
              )}
              {orderStatus === "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£" && (
                <button onClick={() => handleUpdateStatus("‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")} className="py-2 rounded-lg bg-green-500 text-white font-semibold hover:bg-green-600">
                  ‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                </button>
              )}
              {(orderStatus === "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" || orderStatus === "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£") && (
                <button onClick={() => handleUpdateStatus("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")} className="py-2 rounded-lg bg-red-500 text-white font-semibold hover:bg-red-600">
                  ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                </button>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default OrderDetailsPage;
