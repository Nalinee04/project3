"use client";

import { useEffect, useState } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import Image from "next/image";
import SweetAlert from "@/components/ui/sweetAlert";
import { QrCode } from "lucide-react";

interface CartItem {
  cart_id: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏° cart_id
  item_id: string;
  product_name: string;
  price: number;
  quantity: number;
  image_url: string;
  details?: string;
}

const ConfirmationPage = () => {
  const searchParams = useSearchParams();
  const cartIdFromParams = searchParams.get("cart_id");

  let parsedCartId = null;
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ cart_id ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON
    if (cartIdFromParams) {
      parsedCartId = decodeURIComponent(cartIdFromParams); // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    }
  } catch (error) {
    console.error("Error parsing cart_id:", error);
  }

  const router = useRouter();
  const [userName, setUserName] = useState<string | null>(null);
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [shopId, setShopId] = useState<string | null>(null); // ‚úÖ ‡πÉ‡∏ä‡πâ useState
  const [deliveryType, setDeliveryType] = useState("‡∏™‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà");
  const [outOfStockAction, setOutOfStockAction] = useState(
    "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ó‡∏ô"
  );
  const [restaurantNote, setRestaurantNote] = useState(""); // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ñ‡∏∂‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£

  const [paymentMethod, setPaymentMethod] = useState(" ‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î");

  useEffect(() => {
    console.log("üîé Query String:", searchParams.toString()); // ‚úÖ ‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏ô URL

    const shopIdFromParams = searchParams.get("shop_id");
    console.log("‚úÖ Shop ID:", shopIdFromParams); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ shop_id
    setShopId(shopIdFromParams || null); // üî• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ shop_id ‡∏•‡∏á state

    const queryId = searchParams.getAll("id");
    console.log("üõí ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:", queryId); // ‚úÖ ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

    if (queryId.length > 0) {
      const items: CartItem[] = queryId.map((id, i) => {
        const cartId = `${id}-${searchParams.getAll("options")[i] || ""}-${
          searchParams.getAll("note")[i] || ""
        }`;
        return {
          cart_id: cartId, // ‡πÄ‡∏û‡∏¥‡πà‡∏° cart_id
          item_id: id || `item-${i}`,
          product_name: searchParams.getAll("name")[i] || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π",
          price: parseFloat(searchParams.getAll("price")[i]) || 0,
          quantity: Math.max(
            parseInt(searchParams.getAll("quantity")[i]) || 1,
            1
          ),
          image_url: searchParams.getAll("image")[i] || "/images/photo.png",
          details: searchParams.getAll("details")[i] || "",
        };
      });
      setCartItems(items); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô cartItems
    }
  }, [searchParams]);

  const handleSubmitOrder = async () => {
    if (cartItems.length === 0) {
      SweetAlert(false, () => alert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"));
      return;
    }

    if (!shopId) {
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤");
      return;
    }

    const totalAmount = cartItems.reduce(
      (total, item) => total + item.price * item.quantity,
      0
    );

    const qrUrl = `/qr?shop_id=${shopId}&amount=${totalAmount}`;
    console.log("Redirecting to:", qrUrl); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL
    router.push(qrUrl);
  };

  const handleRemoveItem = (cartId: string) => {
    const updatedCart = cartItems.filter((item) => item.cart_id !== cartId);
    setCartItems(updatedCart);

    if (updatedCart.length === 0) {
      // ‡∏´‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
      router.push("/home");
    }
  };

  return (
    <div className="container mx-auto p-4 bg-gray-50 min-h-screen">
      <div className="p-4 bg-white rounded-lg shadow-md">
        <div className="flex justify-between items-center pb-4 border-b">
          <h2 className="text-lg font-semibold">‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h2>
          <button
            className="border-2 border-black text-black text-sm font-semibold px-4 py-1 rounded-full bg-white"
            onClick={() => router.push(shopId ? `/menus/${shopId}` : "/home")}
          >
            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          </button>
        </div>

        {cartItems.length > 0 ? (
          <div className="divide-y divide-gray-300">
            {cartItems.map((item) => (
              <div key={item.item_id} className="flex items-start gap-4 py-4">
                <div className="flex items-end gap-2">
                  <div className="w-20 h-20">
                    <Image
                      src={item.image_url}
                      alt={item.product_name}
                      width={80}
                      height={80}
                      className="rounded-lg object-cover w-full h-full"
                    />
                  </div>
                  <span className="text-xs bg-gray-200 text-black px-2 py-0.5 rounded">
                    x{item.quantity}
                  </span>
                </div>

                <div className="flex-1">
                  <p className="font-semibold">{item.product_name}</p>
                  {item.details && (
                    <p className="text-sm text-gray-500">{item.details}</p>
                  )}
                  <div className="flex items-center gap-2 mt-2">
                    <button
                      className="bg-yellow-500 text-white px-3 py-1 rounded text-sm"
                      onClick={() =>
                        router.push(`/detail?menu_id=${item.item_id}`)
                      }
                    >
                      ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                    </button>
                    <button
                      className="bg-red-500 text-white px-3 py-1 rounded text-sm ml-4"
                      onClick={() => handleRemoveItem(item.cart_id)} // ‡πÉ‡∏ä‡πâ cart_id
                    >
                      ‡∏•‡∏ö
                    </button>
                  </div>
                </div>
                <p className="font-semibold">‡∏ø{item.price}</p>
              </div>
            ))}
          </div>
        ) : (
          <p className="text-center py-4">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</p>
        )}

        <div className="border-t pt-4 mt-4">
          <div className="flex justify-between text-md font-semibold">
            <span>‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£</span>
            <span>
              ‡∏ø
              {cartItems.reduce(
                (total, item) => total + item.price * item.quantity,
                0
              )}
            </span>
          </div>
          <div className="flex justify-between text-lg font-semibold border-t pt-4 mt-2">
            <span>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
            <span>
              ‡∏ø
              {cartItems.reduce(
                (total, item) => total + item.price * item.quantity,
                0
              )}
            </span>
          </div>
        </div>

        {/* üî• ‡πÄ‡∏û‡∏¥‡πà‡∏° UI ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£ */}
        <div className="mt-6 p-4 bg-white rounded-lg shadow-md">
          <h3 className="text-md font-semibold">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£</h3>
          <div
            className="mt-2 flex items-center gap-2 p-3 cursor-pointer"
            onClick={() => setDeliveryType("‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô")}
          >
            <div
              className={`w-5 h-5 border-2 rounded-full flex items-center justify-center 
                    ${deliveryType === "‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô" ? "border-yellow-500" : "border-gray-300"}`}
            >
              {deliveryType === "‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô" && (
                <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
              )}
            </div>
            <span>‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô</span>
          </div>
        </div>

        {/* üî• UI ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô */}
        <div className="mt-4 p-4 bg-white rounded-lg shadow-md">
          <h3 className="text-md font-semibold">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
          <div
            className="mt-2 flex items-center gap-2 p-3 cursor-pointer"
            onClick={() => setPaymentMethod("‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î")}
          >
            <div
              className={`w-5 h-5 border-2 rounded-full flex items-center justify-center 
                  ${paymentMethod === "‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î" ? "border-yellow-500" : "border-gray-300"}`}
            >
              {paymentMethod === "‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î" && (
                <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
              )}
            </div>
            <span className="flex items-center gap-2">
              <QrCode className="w-5 h-5 text-gray-600" />
              ‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î
            </span>
          </div>
        </div>

        {/* ‡∏ß‡∏¥‡∏ò‡∏µ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏î */}
        <div className="mt-4 p-4 bg-white rounded-lg shadow-md">
          <h3 className="text-md font-semibold">‡∏ß‡∏¥‡∏ò‡∏µ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏î</h3>
          <select
            className="mt-2 p-2 border rounded w-full"
            value={outOfStockAction}
            onChange={(e) => setOutOfStockAction(e.target.value)}
          >
            <option value="‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ó‡∏ô">
              ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ó‡∏ô
            </option>
            <option value="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏´‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏î">
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏´‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏î
            </option>
          </select>
        </div>

        {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ñ‡∏∂‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ */}
        <div className="mt-4 p-4 bg-white rounded-lg shadow-md">
          <h3 className="text-md font-semibold">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ñ‡∏∂‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£</h3>
          <textarea
            className="mt-2 p-2 border rounded w-full"
            rows={3}
            placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ú‡∏±‡∏Å..."
            value={restaurantNote}
            onChange={(e) => setRestaurantNote(e.target.value)}
          ></textarea>
        </div>

        <div className="fixed bottom-0 left-0 w-full bg-white shadow-md p-4">
          <button
            className="w-full bg-yellow-500 text-white py-3 rounded-lg text-lg"
            onClick={handleSubmitOrder}
          >
            ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
          </button>
        </div>
      </div>
    </div>
  );
};

export default ConfirmationPage;
