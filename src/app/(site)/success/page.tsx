"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import Image from "next/image";
import ProgressBar from "@/components/ui/ProgressBar";
import SweetAlert from "@/components/ui/sweetAlert";
import axios from "axios";

interface CartItem {
  id: string;
  name: string;
  price: number;
  quantity: number;
  image: string;
}

interface Order {
  orderNumber: string;
  customerName: string;
  orderDate: string;
  status: string;
  items: CartItem[];
  note?: string;
}

const SuccessPage = () => {
  const router = useRouter();
  const [order, setOrder] = useState<Order | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchOrderData = async () => {
      try {
        const token = typeof window !== "undefined" ? localStorage.getItem("token") : null
        if (!token) throw new Error("No token found");

        // üìå ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        const { data: fetchedOrders } = await axios.get("/api/orders", {
          headers: { Authorization: `Bearer ${token}` },
        });

        if (fetchedOrders.length > 0) {
          const latestOrder = fetchedOrders[0];

          if (!latestOrder.order_id) throw new Error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö order_id");

          // üìå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ order_id
          const orderId = latestOrder.order_id;
          const { data: fetchedOrderItems } = await axios.get(`/api/order_items?order_id=${orderId}`, {
            headers: { Authorization: `Bearer ${token}` },
          });

          const orderData: Order = {
            orderNumber: latestOrder.order_number,
            customerName: latestOrder.customer_name,
            orderDate: new Date(latestOrder.created_at).toLocaleString(),
            status: latestOrder.status,
            items: Array.isArray(fetchedOrderItems)
              ? fetchedOrderItems.map((item: any) => ({
                  id: item.item_id,
                  name: item.menu_name, // ‚úÖ ‡πÉ‡∏ä‡πâ menu_name
                  price: Number(item.price),
                  quantity: item.quantity,
                  image: item.menu_image, // ‚úÖ ‡πÉ‡∏ä‡πâ menu_image
                }))
              : [],
            note: latestOrder.note,
          };

          setOrder(orderData);
        } else {
          console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠");
        }
      } catch (error) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchOrderData();
  }, []);

  useEffect(() => {
    if (!order && !loading) {
      const timer = setTimeout(() => {
        router.push("/");
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [order, loading, router]);

  const handleConfirmOrder = () => {
    console.log("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß!");
    router.push("/success"); // ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
      </div>
    );
  }

  if (!order) {
    return (
      <div className="container mx-auto p-6 bg-gray-50 min-h-screen flex items-center justify-center">
        <div className="p-6 bg-white rounded-lg shadow-md text-center">
          <h2 className="text-lg font-semibold mb-4">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h2>
          <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
        </div>
      </div>
    );
  }

  const statusSteps: Record<string, number> = {
    '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£': 1,
    '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£': 2,
    '‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß': 3,
  };

  const currentStep = statusSteps[order.status] || 1;
  console.log("üîç currentStep:", currentStep, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:", order.status);

  return (
    <div className="container mx-auto p-6 bg-gray-50 min-h-screen">
      <ProgressBar currentStep={currentStep} />
      <SweetAlert orderStatus={order?.status ?? ""} onConfirm={handleConfirmOrder} />
      
      <div className="p-6 bg-white rounded-lg shadow-md">
        <h2 className="text-center text-2xl font-bold mb-6">‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h2>

        <div className="border-b pb-4 mb-4">
          <h3 className="text-lg font-semibold mb-2">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h3>
          <p className="text-sm">‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: <span className="font-medium">{order.orderNumber}</span></p>
          <p className="text-sm">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: <span className="font-medium">{order.customerName}</span></p>
          <p className="text-sm">‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: <span className="font-medium">{order.orderDate}</span></p>
          <p className="text-sm">
            ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: <span className={`font-medium ${order.status === "‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß" ? "text-green-600" : "text-yellow-600"}`}>{order.status}</span>
          </p>
        </div>

        <div className="border-b pb-4 mb-4">
          <h3 className="text-lg font-semibold mb-2">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
          {order.items.length > 0 ? (
            order.items.map((item) => (
              <div key={item.id} className="grid grid-cols-2 items-center border p-4 mb-2 rounded-lg shadow-sm hover:shadow-md transition">
                <div className="flex items-center gap-4">
                  <Image
                    src={item.image?.startsWith("http") ? item.image : `http://localhost:3000${item.image || ""}`}
                    alt={item.name}
                    width={50}
                    height={50}
                    className="rounded-md h-10 object-cover"
                  />
                  <div>
                    <p className="font-medium">{item.name}</p>
                    <p className="text-sm text-gray-600">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {item.quantity}</p>
                  </div>
                </div>
                <div className="text-right font-semibold">‡∏ø{item.price}</div>
              </div>
            ))
          ) : (
            <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</p>
          )}
          {order.items.length > 0 && (
            <div className="text-right font-semibold mt-2">
              ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ‡∏ø{order.items.reduce((total, item) => total + item.price * item.quantity, 0)}
            </div>
          )}
        </div>

        {order.note && (
          <div className="border-b pb-4 mb-4">
            <h3 className="text-lg font-semibold mb-2">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</h3>
            <p className="text-sm">{order.note}</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default SuccessPage;
