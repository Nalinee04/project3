import { NextResponse } from "next/server";
import connection from "@/lib/db";
import { JwtPayload } from "jsonwebtoken"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JwtPayload
import { FieldPacket, ResultSetHeader } from "mysql2";
import { authenticateToken } from "@/lib/middleware";

interface JwtPayloadWithRole extends JwtPayload {
  role: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏° 'role' ‡πÄ‡∏õ‡πá‡∏ô string
}

// ******************
// ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
// ******************
export async function GET(req: Request) {
  console.log("üîç Header Authorization:", req.headers.get("Authorization"));

  const user: any = authenticateToken(req);

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö user ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö role ‡∏Ç‡∏≠‡∏á user ‡∏à‡∏∞‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
  if (!user || !user.role) {
    return NextResponse.json({ error: "Forbidden" }, { status: 403 });
  }

  const { searchParams } = new URL(req.url);
  const order_id = searchParams.get("order_id");

  try {
    if (!connection) throw new Error("Database connection is not established.");

    let query = `
      SELECT 
        o.order_id,
        o.order_number,
        o.customer_name,
        o.shop_id,
        o.status,
        o.created_at,
        o.deliveryTime,
        o.totalAmount, 
        o.note,
        o.slip,
        u.phone AS customer_phone,  -- ‡∏î‡∏∂‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
        COALESCE(
          CONCAT('[', GROUP_CONCAT(
            JSON_OBJECT(
              'menu_name', oi.menu_name, 
              'price', oi.price, 
              'quantity', oi.quantity, 
              'menu_image', oi.menu_image
            )
          ), ']'), '[]'
        ) AS items 
      FROM orders o
      LEFT JOIN order_items oi ON o.order_id = oi.order_id
      LEFT JOIN users u ON o.customer_id = u.id  -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
    `;

    const queryParams: any[] = [];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    if (user.role === "shop") {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° shop_id
      query += " WHERE o.shop_id = ? AND o.status = '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'";
      queryParams.push(user.shop_id);
    } else if (user.role === "user") {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° customer_id (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ customer_id ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠)
      query += " WHERE o.customer_id = ? AND o.status = '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'";
      queryParams.push(user.id); // user.id ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ order_id ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° order_id
    if (order_id) {
      query += " AND o.order_id = ?";
      queryParams.push(order_id);
    }

    query += " GROUP BY o.order_id ORDER BY o.created_at DESC";

    const [orders]: [any[], FieldPacket[]] = await connection.query(query, queryParams);

    const formattedOrders = orders.map((order) => ({
      ...order,
      totalAmount: order.totalAmount,
      items: JSON.parse(order.items || "[]"),
    }));

    return NextResponse.json(order_id ? formattedOrders[0] : formattedOrders, {
      status: 200,
    });
  } catch (error) {
    console.error("Error fetching orders:", error);
    return NextResponse.json({ error: "Error fetching orders" }, { status: 500 });
  }
}

// ******************
// ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (user) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
// ******************
export async function POST(req: Request) {
  const user = authenticateToken(req);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡πÄ‡∏õ‡πá‡∏ô JwtPayload ‡∏ó‡∏µ‡πà‡∏°‡∏µ property 'role'
  if (!user || (user as JwtPayloadWithRole).role !== "user") {
    return NextResponse.json({ error: "Forbidden" }, { status: 403 });
  }

  const { customer_name, deliveryTime, note, slip, items, shop_id } = await req.json();

  if (!customer_name || !items || !Array.isArray(items) || items.length === 0 || !slip || !shop_id) {
    return NextResponse.json({ error: "Missing required fields" }, { status: 400 });
  }

  const areItemsValid = items.every((item) => item.menu_name && item.price > 0 && item.quantity > 0);
  if (!areItemsValid) {
    return NextResponse.json({ error: "Invalid item data" }, { status: 400 });
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á order_number ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö TSK-XXXXXX
  const generateOrderNumber = () => {
    const randomNumber = Math.floor(100000 + Math.random() * 900000); // ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 6 ‡∏´‡∏•‡∏±‡∏Å
    return `TSK-${randomNumber}`;
  };
  
  const order_number = generateOrderNumber(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠

  try {
    const totalAmount = items.reduce((total: number, item: { price: number; quantity: number }) =>
      total + item.price * item.quantity, 0);

    const [orderResult]: [ResultSetHeader, FieldPacket[]] = await connection.query(
      "INSERT INTO `orders` (order_number, customer_name, shop_id, status, created_at, deliveryTime, totalAmount, note, slip) VALUES (?, ?, ?, ?, current_timestamp(), ?, ?, ?, ?)",
      [order_number, customer_name, shop_id, "‡∏£‡∏≠‡∏î‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", deliveryTime, totalAmount, note, slip]
    );

    const orderId = orderResult.insertId;

    const orderItemsQueries = items.map((item) =>
      connection.query(
        "INSERT INTO order_items (order_id, menu_name, price, quantity, menu_image) VALUES (?, ?, ?, ?, ?)",
        [orderId, item.menu_name, item.price, item.quantity, item.menu_image]
      )
    );

    await Promise.all(orderItemsQueries);

    return NextResponse.json({ message: "Order saved successfully!", order: { order_id: orderId, order_number, customer_name, shop_id, status: "‡∏£‡∏≠‡∏î‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", deliveryTime, totalAmount, note, slip } }, { status: 200 });
  } catch (error) {
    console.error("Error saving order:", error);
    return NextResponse.json({ error: "Error saving order" }, { status: 500 });
  }
}
