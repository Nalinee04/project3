import { NextResponse } from "next/server";
import connection from "@/lib/db";
import { RowDataPacket } from "mysql2";
import { authenticateToken } from "@/lib/middleware";

interface Shop extends RowDataPacket {
  shop_id: number;
  shop_name: string;
  status: string;
  cate_id: number;
}

export async function GET(req: Request) {
  console.log("üîç Header Authorization:", req.headers.get("Authorization"));

  const user: any = authenticateToken(req);
  console.log("üõ† ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user ‡∏ó‡∏µ‡πà decode ‡πÑ‡∏î‡πâ:", user);

  if (!user) {
    console.log("‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ Token ‡∏´‡∏£‡∏∑‡∏≠ Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    return NextResponse.json({ error: "Forbidden: Invalid token" }, { status: 403 });
  }

  try {
    if (!connection) throw new Error("Database connection is not established.");

    let query: string;
    let params: any[] = [];

    if (user.shop_id) {
      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
      query = `SELECT * FROM shops WHERE shop_id = ?`;
      params = [user.shop_id];
    } else {
      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏î‡∏∂‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      query = `SELECT * FROM shops WHERE status = 'open'`;
      params = []; // üõ† ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç! ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î params ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡πÄ‡∏õ‡∏•‡πà‡∏≤
    }

    const [result]: [Shop[], any] = await connection.query(query, params);

    console.log("üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤:", result);

    return NextResponse.json({ shops: result }, { status: 200 }); // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô { shops: [...] }
  } catch (error: any) {
    console.error("‚ùå Error fetching shop status:", error);
    return NextResponse.json({ error: "Error fetching shop status" }, { status: 500 });
  }
}
