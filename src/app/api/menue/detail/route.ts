import { NextResponse } from "next/server";
import connection from "@/lib/db";
import { RowDataPacket } from "mysql2";

// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
interface Menu extends RowDataPacket {
  menu_id: number;
  shop_id: number;
  menu_name: string;
  price: number;
  cate_id: number;
  status: number;
  created_at: string;
  menu_image: string;
  shop_name: string; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° shop_name
}

interface OptionGroup extends RowDataPacket {
  group_id: number;
  group_name: string;
  is_required: number;
  max_select: number;
}

interface OptionItem extends RowDataPacket {
  item_id: number;
  group_id: number;
  item_name: string;
  add_price: number;
}

// GET: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏°‡∏ô‡∏π + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const menu_id = searchParams.get("menu_id");

    if (!menu_id) {
      return NextResponse.json({ error: "No menu_id provided" }, { status: 400 });
    }

    // 1Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏£‡∏ß‡∏° shop_name)
    const menuQuery = `
      SELECT m.*, s.shop_name 
      FROM menus m
      JOIN shops s ON m.shop_id = s.shop_id
      WHERE m.menu_id = ?`;

    const [menuResults]: [Menu[], any] = await connection.query(menuQuery, [menu_id]);

    if (menuResults.length === 0) {
      return NextResponse.json({ error: "Menu not found" }, { status: 404 });
    }

    const menu = menuResults[0]; // ‚úÖ menu ‡∏à‡∏∞‡∏°‡∏µ shop_name ‡∏î‡πâ‡∏ß‡∏¢
    console.log("üìå ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á menu:", menu);

    // 2Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ option groups ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ
    const groupQuery = `
      SELECT og.group_id, og.group_name, og.is_required, og.max_select
      FROM option_groups og
      JOIN menu_options mo ON og.group_id = mo.group_id
      WHERE mo.menu_id = ?`;

    const [groupResults]: [OptionGroup[], any] = await connection.query(groupQuery, [menu_id]);

    if (groupResults.length === 0) {
      return NextResponse.json({ menu, options: [] }, { status: 200 });
    }

    // 3Ô∏è‚É£ ‡∏î‡∏∂‡∏á option items ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ
    const groupIds = groupResults.map((g) => g.group_id);

    const itemsQuery = `
      SELECT oi.item_id, oi.group_id, oi.item_name, oi.add_price 
      FROM option_items oi
      WHERE oi.group_id IN (?)`;

    const [itemResults]: [OptionItem[], any] = await connection.query(itemsQuery, [groupIds]);

    // 4Ô∏è‚É£ ‡∏à‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà UI ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    const formattedGroups = groupResults.map((group) => ({
      group_id: group.group_id,
      group_name: group.group_name,
      is_required: group.is_required,
      max_select: group.max_select,
      options: itemResults
        .filter((item) => item.group_id === group.group_id)
        .map((item) => ({
          item_id: item.item_id,
          item_name: item.item_name,
          add_price: item.add_price,
        })),
    }));

    // ‚úÖ ‡∏™‡πà‡∏á Response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    return NextResponse.json({
      menu,
      options: formattedGroups,
    }, { status: 200 });

  } catch (error: any) {
    console.error("‚ùå Error in GET /api/menu/detail:", error);
    return NextResponse.json({ error: "Server error: " + error.message }, { status: 500 });
  }
}
