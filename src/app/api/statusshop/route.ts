//statusshop
import { NextResponse } from "next/server";
import connection from "@/lib/db";
import { authenticateToken } from "@/lib/middleware";
import { JwtPayload } from "jsonwebtoken"; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ JwtPayload ‡∏à‡∏≤‡∏Å jsonwebtoken

interface UserWithShop extends JwtPayload {
  shop_id: string;
}

export async function GET(req: Request) {
  console.log("üîç Header Authorization:", req.headers.get("Authorization"));

  const user = authenticateToken(req) as UserWithShop;  // ‡πÉ‡∏ä‡πâ type assertion ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ TypeScript ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤ user ‡πÄ‡∏õ‡πá‡∏ô UserWithShop
  console.log("üõ† ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user ‡∏ó‡∏µ‡πà decode ‡πÑ‡∏î‡πâ:", user);

  if (!user) {
    console.log("‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ Token ‡∏´‡∏£‡∏∑‡∏≠ Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    return NextResponse.json({ error: "Forbidden: Invalid token" }, { status: 403 });
  }

  if (!user.shop_id) {
    console.log("‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ shop_id ‡πÉ‡∏ô Token");
    return NextResponse.json({ error: "Forbidden: No shop access" }, { status: 403 });
  }

  try {
    if (!connection) throw new Error("Database connection is not established.");

    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏≤‡∏£ query ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ array ‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ rows
    const [result]: any[] = await connection.query(
      `SELECT status FROM shops WHERE shop_id = ?`, 
      [user.shop_id]
    );

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ result ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!result || result.length === 0) {
      return NextResponse.json({ error: "Shop not found" }, { status: 404 });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô
    console.log("üìä Shop Status:", result[0].status);
    return NextResponse.json({ status: result[0].status }, { status: 200 });

  } catch (error) {
    console.error("Error fetching shop status:", error);
    return NextResponse.json({ error: "Error fetching shop status" }, { status: 500 });
  }
}

export async function PUT(req: Request) {
    console.log("üîç Header Authorization:", req.headers.get("Authorization"));
  
    const user = authenticateToken(req) as UserWithShop;
    console.log("üõ† ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user ‡∏ó‡∏µ‡πà decode ‡πÑ‡∏î‡πâ:", user);
  
    if (!user) {
      console.log("‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ Token ‡∏´‡∏£‡∏∑‡∏≠ Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return NextResponse.json({ error: "Forbidden: Invalid token" }, { status: 403 });
    }
  
    if (!user.shop_id) {
      console.log("‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ shop_id ‡πÉ‡∏ô Token");
      return NextResponse.json({ error: "Forbidden: No shop access" }, { status: 403 });
    }
  
    try {
      const body = await req.json();
      const { status } = body; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ status ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (‡πÄ‡∏ä‡πà‡∏ô "open" ‡∏´‡∏£‡∏∑‡∏≠ "closed")
  
      if (!status) {
        return NextResponse.json({ error: "Status is required" }, { status: 400 });
      }
  
      if (!["open", "closed"].includes(status)) {
        return NextResponse.json({ error: "Invalid status" }, { status: 400 });
      }
  
      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô
      const [result] = await connection.query(
        `UPDATE shops SET status = ? WHERE shop_id = ?`,
        [status, user.shop_id]
      );
  
      // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ResultSetHeader ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á affectedRows ‡∏à‡∏≤‡∏Å result
      if ((result as any).affectedRows === 0) {
        return NextResponse.json({ error: "Shop not found or status not updated" }, { status: 404 });
      }
  
      console.log("üìä Shop status updated to:", status);
      return NextResponse.json({ message: "Shop status updated successfully", status }, { status: 200 });
  
    } catch (error) {
      console.error("Error updating shop status:", error);
      return NextResponse.json({ error: "Error updating shop status" }, { status: 500 });
    }
  }